---
import type { Categories } from '@cloudcommerce/api/types';
import type CmsHeader from '@@storefront/types/cms-header';
import type CmsContacts from '@@storefront/types/cms-contacts';
import type { PageContext } from '@@storefront/ssr-context';
import { i19buyOnWhatsApp } from '@@i18n';
import { getImage } from '@@storefront/ssr/image';
import TopBar, { Props as TopBarProps } from '@@components/TopBar.vue';
import TheHeader, { Props as TheHeaderProps } from '@@components/TheHeader.vue';
import HeaderNav from '@@components/header/HeaderNav.vue';
import HeaderButtons, { Props as HeaderButtonsProps } from '@@components/header/HeaderButtons.vue';

export interface Props {
  pageContext: PageContext;
  logoTransformOptions?: Parameters<typeof getImage>[0];
  topBarProps?: Partial<TopBarProps>;
  theHeaderProps?: Partial<TheHeaderProps>;
  headerButtonsProps?: Partial<HeaderButtonsProps>;
}

const {
  pageContext: {
    apiState,
    settings,
    cms,
  },
  logoTransformOptions,
  topBarProps,
  theHeaderProps,
  headerButtonsProps,
} = Astro.props as Props;
const header = cms('header') as CmsHeader;
const contacts = cms('contacts') as CmsContacts;
let headerCategories: Array<{ slug: string, name: string }> = [];
let isCategoriesNavFull: boolean | undefined;
if (header.categories_list) {
  if (header.categories_list.featured.length) {
    // Selected categories/collections/brands
    headerCategories = header.categories_list.featured.map((pathAndName) => {
      const [path, name] = pathAndName.split('?');
      return { slug: path.slice(1), name };
    });
  }
  if (header.categories_list.random) {
    const mainCategories: Partial<Categories>[] | undefined = apiState
      .categories?.filter(({ parent }) => (!parent || !parent.slug));
    if (mainCategories) {
      for (let i = 0; i < header.categories_list.random && i < mainCategories.length; i++) {
        if (!headerCategories.find(({ slug }) => mainCategories[i].slug === slug)) {
          headerCategories.push({
            slug: mainCategories[i].slug,
            name: mainCategories[i].name,
          });
        }
      }
    }
  }
  isCategoriesNavFull = header.categories_list.full_width;
}
const loginDrawerAdditionalLinks: HeaderButtonsProps['loginDrawerAdditionalLinks']
  = header.drawer_links?.map(({ title, link }) => ({ href: link, innerHTML: title })) || [];
if (contacts.whatsapp) {
  loginDrawerAdditionalLinks.unshift({
    href: `https://wa.me/55${contacts.whatsapp.replace(/\D/g, '')}`,
    innerHTML: `<i class="i-whatsapp text-lg"></i> ${i19buyOnWhatsApp}`,
    isBlank: true,
  });
}

declare global {
  var TopBarProps: TopBarProps;
  var TheHeaderProps: TheHeaderProps;
  var HeaderButtonsProps: HeaderButtonsProps;
}
globalThis.TopBarProps = {
  marketingStripe: header.marketing_stripe,
  pageLinks: header.contacts_stripe.pages,
  hasPhoneLinks: header.contacts_stripe.phone_wpp,
  hasNetworkLinks: header.contacts_stripe.socials,
  contacts,
  ...topBarProps,
};
globalThis.TheHeaderProps = {
  logo: {
    ...await getImage({
      src: settings.logo,
      width: 150,
      format: 'webp',
      quality: 90,
      ...logoTransformOptions,
    }) as any,
    alt: settings.name,
  },
  logoAltHeading: Astro.url.pathname === '/' ? 'h1' : 'h2',
  ...theHeaderProps,
};
globalThis.HeaderButtonsProps = {
  loginDrawerAdditionalLinks,
  ...headerButtonsProps,
};
---

<Fragment>
  <slot name="top-bar">
    <TopBar {...globalThis.TopBarProps} />
  </slot>
  <slot name="header">
    <TheHeader {...globalThis.TheHeaderProps}>
      <Fragment slot="nav">
        <HeaderNav />
      </Fragment>
      <Fragment slot="buttons">
        <HeaderButtons client:idle {...globalThis.HeaderButtonsProps} />
      </Fragment>
    </TheHeader>
  </slot>
</Fragment>
